// Generated by gencpp from file custom_msgs/motor_pwm.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_MOTOR_PWM_H
#define CUSTOM_MSGS_MESSAGE_MOTOR_PWM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct motor_pwm_
{
  typedef motor_pwm_<ContainerAllocator> Type;

  motor_pwm_()
    : L(0)
    , R(0)  {
    }
  motor_pwm_(const ContainerAllocator& _alloc)
    : L(0)
    , R(0)  {
  (void)_alloc;
    }



   typedef int64_t _L_type;
  _L_type L;

   typedef int64_t _R_type;
  _R_type R;





  typedef boost::shared_ptr< ::custom_msgs::motor_pwm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::motor_pwm_<ContainerAllocator> const> ConstPtr;

}; // struct motor_pwm_

typedef ::custom_msgs::motor_pwm_<std::allocator<void> > motor_pwm;

typedef boost::shared_ptr< ::custom_msgs::motor_pwm > motor_pwmPtr;
typedef boost::shared_ptr< ::custom_msgs::motor_pwm const> motor_pwmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::motor_pwm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::motor_pwm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::motor_pwm_<ContainerAllocator1> & lhs, const ::custom_msgs::motor_pwm_<ContainerAllocator2> & rhs)
{
  return lhs.L == rhs.L &&
    lhs.R == rhs.R;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::motor_pwm_<ContainerAllocator1> & lhs, const ::custom_msgs::motor_pwm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::motor_pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::motor_pwm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::motor_pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::motor_pwm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::motor_pwm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::motor_pwm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::motor_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4184f594ee6fa4706c2c2eca40be03fe";
  }

  static const char* value(const ::custom_msgs::motor_pwm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4184f594ee6fa470ULL;
  static const uint64_t static_value2 = 0x6c2c2eca40be03feULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::motor_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/motor_pwm";
  }

  static const char* value(const ::custom_msgs::motor_pwm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::motor_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 L\n"
"int64 R\n"
;
  }

  static const char* value(const ::custom_msgs::motor_pwm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::motor_pwm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.L);
      stream.next(m.R);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_pwm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::motor_pwm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::motor_pwm_<ContainerAllocator>& v)
  {
    s << indent << "L: ";
    Printer<int64_t>::stream(s, indent + "  ", v.L);
    s << indent << "R: ";
    Printer<int64_t>::stream(s, indent + "  ", v.R);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_MOTOR_PWM_H
